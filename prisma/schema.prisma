// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email String @unique

  password String

  name String

  createdAt DateTime @default(now())

  roles Role[] @default([USER])

  updatedAt DateTime @updatedAt

  reviews Review[]

  cartItems CartItem[]

  orders Order[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  brand String

  description String

  price Float

  colors String[]

  sizes Size[]

  images String[]

  discount Int @default(0)

  rating Float @default(0)

  reviews Review[]

  cartItem CartItem[]

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("products")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  description String

  rating Float

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String @db.ObjectId

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int

  color String

  size Size

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String @db.ObjectId

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderItems OrderItem[]

  status Status @default(PLACED)

  totalAmount Float

  shipping Json

  paymentId String

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum Status {
  PLACED
  SHIPPED
  DELIVERED
  CANCELLED
}

type OrderItem {
  productId String @db.ObjectId

  name String

  brand String

  quantity Int

  description String

  price Float

  color String

  size Size

  images String[]
}
